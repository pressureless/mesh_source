vec from linearalgebra
MeshSets, BoundaryMatrices, UnsignedBoundaryMatrices, NonZeros, ValueSet, IndicatorVector  from MeshConnectivity
M ∈ mesh 
V, E, F = MeshSets( M )
ve, ef = BoundaryMatrices(M) 
uve, uef = UnsignedBoundaryMatrices(M)
Vertices(S) = S₁  where S: SimplicialSet
Vertices(f) = vertexset(NonZeros(uve uef IndicatorVector(M, {f}))) where f: ℤ faces
Vertices(f) = vertexset(NonZeros(uve uef IndicatorVector(M, f))) where f: {ℤ} faces
Vertices(e) = vertexset(NonZeros(uve IndicatorVector(M, {e}))) where e: ℤ edges
Vertices(e) = vertexset(NonZeros(uve IndicatorVector(M, e))) where e: {ℤ} edges
Vertices(v) = vertexset(NonZeros(uve uveᵀ IndicatorVector(M, {v}))) where v: ℤ vertices
Vertices(v) = vertexset(NonZeros(uve uveᵀ IndicatorVector(M, v))) where v: {ℤ} vertices

Faces(v) = faceset(NonZeros((uve uef)ᵀ IndicatorVector(M, {v}))) where v: ℤ vertices
Faces(e) = faceset(NonZeros(uefᵀ IndicatorVector(M, {e}))) where e: ℤ edges
Faces(S) = S₃ where S: SimplicialSet

Edges(S) = S₂ where S: SimplicialSet 
Edges(i, j) = vertexset(NonZeros(veᵀ IndicatorVector(M, {i}))) ∩ vertexset(NonZeros(veᵀ IndicatorVector(M, {j}))) where i,j: ℤ vertices


getNeighborVerticesInFace(f, v) = tuple(vvec1_1, vvec2_1) where v ∈ ℤ vertices, f ∈ ℤ faces,
es = edgeset(NonZeros(ef IndicatorVector(M, {f}))),
nes = { s for s ∈ es if ve_v,s != 0 },
vvec1 = vec({ e for e ∈ nes if ef_e,f ve_v,e == -1}),
vvec2 = vec({ e for e ∈ nes if ef_e,f ve_v,e == 1 })


diamond(e) = SimplicialSet(Vertices(e) ,{e}, Faces(e)) where e ∈ ℤ edges
oppositeVertices(e) = tuple(evec, evec) where e ∈ ℤ edges,
evec = vec(Vertices(diamond(e)))