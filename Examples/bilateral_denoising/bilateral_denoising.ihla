NeighborVerticesInFace, FaceNeighbors, VertexOneRing from Neighborhoods(M)
M ∈ mesh
x_i ∈ ℝ^3 

VertexNormal(i) = w/||w|| where i ∈ ℤ vertices,
w = (sum_(f ∈ FaceNeighbors(i)) (x_j- x_i)×(x_k-x_i)
where j, k = NeighborVerticesInFace(f, i) )



DenoisePoint(i) = x_i + n⋅(s/norm)  where i ∈ ℤ vertices,
n = VertexNormal(i),
`σ_c` = CalcSigmaC(i),
neighbors = AdaptiveVertexNeighbor(i, {i}, `σ_c`),
`σ_s` = CalcSigmaS(i, neighbors),
s = (sum_(v ∈ neighbors) (`w_c`⋅`w_s`)⋅h where t = ||x_i - x_v||, h = <n, x_v - x_i>, `w_c` = exp(-t²/(2`σ_c`²)) , `w_s` = exp(-h²/(2`σ_s`²))),
norm = (sum_(v ∈ neighbors) `w_c`⋅`w_s` where t = ||x_i - x_v||, h = <n, x_v - x_i>, `w_c` = exp(-t²/(2`σ_c`²)) , `w_s` = exp(-h²/(2`σ_s`²)))
 

CalcSigmaC(i) = min({||x_i - x_v|| for v ∈ VertexOneRing(i)}) where i ∈ ℤ vertices

CalcSigmaS(i, N) = {sqrt(offset) + 1.0E-12 if sqrt(offset) < 1.0E-12
	sqrt(offset) otherwise where i ∈ ℤ vertices, N ∈ {ℤ} vertices,
n = VertexNormal(i),
avg = (sum_(v ∈ N) t/|N| where t = sqrt(((x_v - x_i)⋅n)²)),
sqs = (sum_(v ∈ N) (t-avg)² where t = sqrt(((x_v - x_i)⋅n)²)),
offset = sqs / |N|


AdaptiveVertexNeighbor(i, n, σ) = { n  if |n|=|target| 
                                           AdaptiveVertexNeighbor(i, target, σ) otherwise where i ∈ ℤ vertices, σ ∈ ℝ, n ∈ {ℤ} vertices,
target = {v for v ∈ VertexOneRing(n) if ||x_i-x_v||< 2σ} ∪ n

