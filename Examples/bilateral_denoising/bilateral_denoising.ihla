GetNeighborVerticesInFace, FaceNeighbors, VertexOneRing from FundamentalMeshAccessors(M)
M ∈ mesh
x_i ∈ ℝ^3 

GetVertexNormal(i) = w/||w|| where i ∈ ℤ vertices,
w = (sum_(f ∈ FaceNeighbors(i)) n ||(x_j- x_i)×(x_k-x_i)||
where n = (x_j- x_i)×(x_k-x_i),
j, k = GetNeighborVerticesInFace(f, i) )


DenoisePoint(i) = x_i + n⋅(s/norm)  where i ∈ ℤ vertices,
n = GetVertexNormal(i),
`σc` = CalcSigmaC(i),
neighbors = GetAdaptiveVertexNeighbor(i, {i}, `σc`),
`σs` = CalcSigmaS(i, neighbors),
s = (sum_(v ∈ neighbors) (`wc`⋅`ws`)⋅h where t = ||x_i - x_v||, h = <n, x_v - x_i>, `wc` = exp(-t²/(2`σc`²)) , `ws` = exp(-h²/(2`σs`²))),
norm = (sum_(v ∈ neighbors) `wc`⋅`ws` where t = ||x_i - x_v||, h = <n, x_v - x_i>, `wc` = exp(-t²/(2`σc`²)) , `ws` = exp(-h²/(2`σs`²)))
 

CalcSigmaC(i) = min({||x_i - x_v|| for v ∈ VertexOneRing(i)}) where i ∈ ℤ vertices

CalcSigmaS(i, N) = {sqrt(offset) + 1.0E-12 if sqrt(offset) < 1.0E-12
	sqrt(offset) otherwise where i ∈ ℤ vertices, N ∈ {ℤ} vertices,
n = GetVertexNormal(i),
avg = (sum_(v ∈ N) t where t = sqrt(((x_v - x_i)⋅n)²))/|N|,
sqs = (sum_(v ∈ N) (t-avg)² where t = sqrt(((x_v - x_i)⋅n)²)),
offset = sqs / |N|


GetAdaptiveVertexNeighbor(i, n, σ) = { n  if |n|=|target| 
                                           GetAdaptiveVertexNeighbor(i, target, σ) otherwise where i ∈ ℤ vertices, σ ∈ ℝ, n ∈ {ℤ} vertices,
target = {v for v ∈ VertexOneRing(n) if ||x_i-x_v||< 2σ} ∪ n

