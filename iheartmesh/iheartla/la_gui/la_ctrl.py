import wx
import wx.stc
from ..la_gui import base_ctrl as bc


class LaTextControl(bc.BaseTextControl):
    # Style IDs
    STC_STYLE_LA_DEFAULT, \
    STC_STYLE_LA_KW,\
    STC_STYLE_LA_IDENTIFIER,\
    STC_STYLE_LA_STRING,\
    STC_STYLE_LA_OPERATOR,\
    STC_STYLE_LA_NUMBER,\
    STC_STYLE_LA_ESCAPE_CHAR, \
    STC_STYLE_LA_ESCAPE_STR , \
    STC_STYLE_LA_ESCAPE_PARAMETER, \
    STC_STYLE_LA_ESCAPE_DESCRIPTION  = range(10)
    
    SUBSTITUTION_START = '\\'
    SUBSTITUTION_END = ' '
    
    def __init__(self, parent):
        super().__init__(parent)
        self.SetEditable(True)
        self.keywords = ['where', 'sqrt', 'exp', 'log', 'sum', 'symmetric', 'diagonal', 'sparse', 'if',
                         'otherwise', 'in', 'index', 'given']
        self.unicode_dict = {'R': '‚Ñù', 'Z': '‚Ñ§', 'x': '√ó', 'times': '√ó', 'inf': '‚àû', 'in': '‚àà', 'sum': '‚àë',
                             'had': '‚àò', 'kro': '‚äó', 'dot': '‚ãÖ', 'T': '·µÄ', '^T': '·µÄ', 'par': '‚àÇ', 'emp': '‚àÖ',
                             'arr': '‚Üí', 'int': '‚à´', 'dbl': '‚Äñ', 'pi': 'œÄ', 'sig': 'œÉ', 'rho': 'œÅ',
                             'phi': 'œï', 'theta': 'Œ∏', 'alpha': 'Œ±', 'beta': 'Œ≤', 'gamma': 'Œ≥', 'delta':'Œ¥', 'Delta':'Œî', 'epsilon': 'Œµ',
                             'zeta':'Œ∂', 'eta':'Œ∑', 'iota':'Œπ', 'kappa':'Œ∫', 'lambda':'Œª', 'mu':'Œº', 'nu':'ŒΩ', 'xi':'Œæ', 'omicron':'Œø',
                             'sigma':'œÉ', 'tau':'œÑ', 'upsilon':'œÖ', 'chi':'œá', 'psi':'œà', 'omega':'œâ',
                             'u0': '‚ÇÄ', 'u1': '‚ÇÅ', 'u2': '‚ÇÇ', 'u3': '‚ÇÉ', 'u4': '‚ÇÑ', 'u5': '‚ÇÖ', 'u6': '‚ÇÜ', 'u7': '‚Çá', 'u8': '‚Çà', 'u9': '‚Çâ',
                             '_0': '‚ÇÄ', '_1': '‚ÇÅ', '_2': '‚ÇÇ', '_3': '‚ÇÉ', '_4': '‚ÇÑ', '_5': '‚ÇÖ', '_6': '‚ÇÜ', '_7': '‚Çá', '_8': '‚Çà', '_9': '‚Çâ',
                             's0': '‚Å∞', 's1': '¬π', 's2': '¬≤', 's3': '¬≥', 's4': '‚Å¥', 's5': '‚Åµ', 's6': '‚Å∂', 's7': '‚Å∑', 's8': '‚Å∏', 's9': '‚Åπ', 's-1': '‚Åª¬π', '^-1': '‚Åª¬π',
                             '^0': '‚Å∞', '^1': '¬π', '^2': '¬≤', '^3': '¬≥', '^4': '‚Å¥', '^5': '‚Åµ', '^6': '‚Å∂', '^7': '‚Å∑', '^8': '‚Å∏', '^9': '‚Åπ',
                             '_a': '‚Çê', '_e': '‚Çë', '_h': '‚Çï', '_i': '·µ¢', '_j': '‚±º', '_k': '‚Çñ',
                             '_l': '‚Çó', '_m': '‚Çò', '_n': '‚Çô', '_o': '‚Çí', '_p': '‚Çö', '_s': '‚Çõ', '_t': '‚Çú', '_u': '·µ§',
                             '_v': '·µ•', '_x': '‚Çì', '1': 'ùüô', 'cdot': '‚ãÖ', 'nabla': '‚àá',
                             'sqrt': '‚àö', '+-': '¬±', '<=': '‚â§', '<=>': '‚áî', '>=': '‚â•', '1/2': '¬Ω',
                             '1/3': '‚Öì', '1/4': '¬º', '1/5': '‚Öï', '1/6': '‚Öô', '1/7': '‚Öê', '1/8': '‚Öõ', '1/9': '‚Öë', '1/10': '‚Öí',
                             '2/3': '‚Öî', '2/5': '‚Öñ', '3/4': '¬æ', '3/5': '‚Öó', '3/8': '‚Öú', '4/5': '‚Öò', '5/6': '‚Öö', '5/8': '‚Öù', '7/8': '‚Öû',
                             'heart': '‚ù§Ô∏è', 'iheartla': 'I‚ù§Ô∏èLA',
                             'le':'‚â§', 'ge':'‚â•', 'ne': '‚â†', 'notin':'‚àâ', 'div':'√∑', 'nplus': '¬±', 'subset': '‚äÇ',
                             'linner': '‚ü®', 'rinner':'‚ü©', 'num1': 'ùüô', 'd':'ùïï',
                             'cap':'‚à©', 'cup':'‚à™',  
                             'uddot': '\u0308', 'udot': '\u0307',
                             'hat': '\u0302', 'bar': '\u0304', 'dag': '‚Ä†', '^+': '‚Å∫', 's+': '‚Å∫'
                             }
        self.StyleSetSpec(self.STC_STYLE_LA_DEFAULT, "fore:#A9B7C6,back:{}".format(bc.BACKGROUND_COLOR))
        self.StyleSetSpec(self.STC_STYLE_LA_KW, "fore:#94558D,bold,back:{}".format(bc.BACKGROUND_COLOR))
        self.StyleSetSpec(self.STC_STYLE_LA_ESCAPE_STR, "fore:#6A8759,bold,back:{}".format(bc.BACKGROUND_COLOR))
        self.StyleSetSpec(self.STC_STYLE_LA_NUMBER, "fore:#9686F5,bold,back:{}".format(bc.BACKGROUND_COLOR))
        self.StyleSetSpec(self.STC_STYLE_LA_ESCAPE_PARAMETER, "fore:#CC7832,bold,back:{}".format(bc.BACKGROUND_COLOR))
        self.StyleSetSpec(self.STC_STYLE_LA_ESCAPE_DESCRIPTION, "fore:#6C7986,bold,back:{}".format(bc.BACKGROUND_COLOR))
        self.SetLexer(wx.stc.STC_LEX_CONTAINER)
        # evt handler
        self.Bind(wx.stc.EVT_STC_MARGINCLICK, self.OnMarginClick)
        self.Bind(wx.stc.EVT_STC_STYLENEEDED, self.OnStyleNeeded)


    def OnStyleNeeded(self, event):
        where_block = False
        last_styled_pos = self.GetEndStyled()
        line = self.LineFromPosition(last_styled_pos)
        start_pos = self.PositionFromLine(line)
        end_pos = event.GetPosition()
        start_pos = 0
        # print("line:{}, start_pos:{}, end_pos:{}".format(line, start_pos, end_pos))
        while start_pos < end_pos:
            self.StartStyling(start_pos)
            char = self.GetTextRange(start_pos, start_pos+1)
            style = self.STC_STYLE_LA_DEFAULT
            if char == '`':
                # identifier with description
                self.SetStyling(1, self.STC_STYLE_LA_ESCAPE_STR)
                start_pos += 1
                while start_pos < end_pos and self.GetTextRange(start_pos, start_pos+1) != '`':
                    self.StartStyling(start_pos)
                    self.SetStyling(1, self.STC_STYLE_LA_ESCAPE_STR)
                    start_pos += 1
                self.SetStyling(1, self.STC_STYLE_LA_ESCAPE_STR)
                start_pos += 1
                continue
            elif char == ':' and where_block:
                # parameters after where block
                cur_line = self.LineFromPosition(start_pos)
                line_pos = self.PositionFromLine(cur_line)
                # print("cur_line:{}, start_pos:{}, line_pos:{}", cur_line, start_pos, line_pos)
                if ':' not in self.GetTextRange(line_pos, start_pos):
                    self.StartStyling(line_pos)
                    self.SetStyling(start_pos-line_pos, self.STC_STYLE_LA_ESCAPE_PARAMETER)
                    self.StartStyling(start_pos)
                else:
                    line_end = self.GetLineEndPosition(cur_line)
                    if self.GetTextRange(line_pos, start_pos).count(':') == 1:
                        self.StartStyling(start_pos + 1)
                        self.SetStyling(line_end - start_pos + 1, self.STC_STYLE_LA_ESCAPE_DESCRIPTION)
                        start_pos = line_end
                        continue
            elif char in (self.SUBSTITUTION_START, self.SUBSTITUTION_END):
                # unicode string
                match = False
                index = 1
                prefix = self.GetTextRange(start_pos, start_pos + index)
                unicode_str = ''
                while self.is_unicode_prefix(prefix) and start_pos + index < end_pos:
                    if self.is_unicode(prefix):
                        unicode_str = self.get_unicode(prefix)
                        match = True
                        break
                    index += 1
                    prefix = self.GetTextRange(start_pos, start_pos + index)
                if match:
                    self.DeleteRange(start_pos, index)
                    self.AddText(unicode_str)
                    start_pos += index
                    continue
            else:
                if char.isnumeric():
                    # numbers
                    style = self.STC_STYLE_LA_NUMBER
                else:
                    # keywords
                    index = 1
                    prefix = self.GetTextRange(start_pos, start_pos+index)
                    if start_pos > 1 and not self.GetTextRange(start_pos-1, start_pos).isalnum():
                        while self.is_keyword_prefix(prefix) and start_pos+index < end_pos:
                            index += 1
                            prefix = self.GetTextRange(start_pos, start_pos + index)
                        if index > 2 and start_pos+index+1 < end_pos:
                            if not self.GetTextRange(start_pos + index - 1, start_pos + index).isalnum():
                                prefix = self.GetTextRange(start_pos, start_pos + index - 1)
                                if self.is_keyword(prefix):
                                    self.SetStyling(index, self.STC_STYLE_LA_KW)
                                    start_pos += index - 1
                                    if prefix == 'where':
                                        where_block = True
                                    continue
            self.SetStyling(1, style)
            start_pos += 1

    def OnMarginClick(self, event):
        pass

    def is_keyword_prefix(self, prefix):
        for keyword in self.keywords:
            if keyword.startswith(prefix):
                return True
        return False

    def is_unicode_prefix(self, prefix):
        for unicode in self.unicode_dict:
            target = self.SUBSTITUTION_START + unicode + self.SUBSTITUTION_END
            if target.startswith(prefix):
                return True
        return False

    def get_unicode(self, unicode):
        return self.unicode_dict[unicode[len(self.SUBSTITUTION_START):-len(self.SUBSTITUTION_END)]]

    def is_keyword(self, key):
        return key in self.keywords

    def is_unicode(self, prefix):
        for unicode in self.unicode_dict:
            target = self.SUBSTITUTION_START + unicode + self.SUBSTITUTION_END
            if target == prefix:
                return True
        return False

